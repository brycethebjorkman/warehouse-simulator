target C

reactor Controller {
    input cmd: int
    input sortation_msg_in: int  
    input storage_msg_in: int  
    input retrieval_msg_in: int  
    output sortation_msg_out: int  
    output storage_msg_out: int  
    output retrieval_msg_out: int  
    state c: int = 0
    timer t(0, 1 sec)
    reaction(t) -> sortation_msg_out, storage_msg_out, retrieval_msg_out {=
        lf_print("Sending Commands at (%lld, %d)",
            lf_time_logical_elapsed(), lf_tag().microstep
        );
        self->c++;
        lf_set(sortation_msg_out, self->c);
        lf_set(storage_msg_out, self->c);
        lf_set(retrieval_msg_out, self->c);
    =}
    reaction(cmd) {=
        lf_print("Command Received: %d at (%lld, %d)", cmd->value,
            lf_time_logical_elapsed(), lf_tag().microstep
        );
    =}
    reaction(sortation_msg_in) {=
        lf_print("Sortation Message Received: %d at (%lld, %d)", sortation_msg_in->value,
            lf_time_logical_elapsed(), lf_tag().microstep
        );
    =}
    reaction(storage_msg_in) {=
        lf_print("Storage Message Received: %d at (%lld, %d)", storage_msg_in->value,
            lf_time_logical_elapsed(), lf_tag().microstep
        );
    =}
    reaction(retrieval_msg_in) {=
        lf_print("Retrieval Message Received: %d at (%lld, %d)", retrieval_msg_in->value,
            lf_time_logical_elapsed(), lf_tag().microstep
        );
    =}
}
